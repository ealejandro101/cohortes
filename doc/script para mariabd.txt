-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema cohortes
-- -----------------------------------------------------
-- Base de datos de la apliación cohortes

-- -----------------------------------------------------
-- Schema cohortes
--
-- Base de datos de la apliación cohortes
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cohortes` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `cohortes` ;

-- -----------------------------------------------------
-- Table `cohortes`.`Materia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Materia` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Materia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idexterno` VARCHAR(45) NOT NULL COMMENT 'Id del sistema externo es el codigo de la materia en el sistema externo',
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `index_idexterno` ON `cohortes`.`Materia` (`idexterno` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `cohortes`.`Contacto`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Contacto` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Contacto` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `email1` VARCHAR(45) NOT NULL,
  `email2` VARCHAR(45) NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `telefono` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `email` ON `cohortes`.`Contacto` (`email1` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `cohortes`.`Cohorte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Cohorte` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Cohorte` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Un nombre para la cohorte, ejemplos\nPregrados Virtuales Ingeniera\nArchivistica\n',
  `codigo` VARCHAR(10) NOT NULL COMMENT 'Un identificador corto, sin espacios para identificar la cohorte.\nEjemplo\n20191',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Una breve explicación de la cohorte',
  `fechainicio` DATE NOT NULL,
  `fechafinal` DATE NOT NULL,
  `coordinadoracademicoId` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_cohorte_contactos`
    FOREIGN KEY (`coordinadoracademicoId`)
    REFERENCES `cohortes`.`Contacto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cohortes`.`Cursocohorte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Cursocohorte` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Cursocohorte` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `cohorteId` INT NOT NULL,
  `isprogramadoenreuniones` TINYINT NOT NULL,
  `idlms` VARCHAR(15) NULL,
  `urllms` VARCHAR(100) NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_cursoscohorte_cohorte1`
    FOREIGN KEY (`cohorteId`)
    REFERENCES `cohortes`.`Cohorte` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'cursos que pertenecen a la cohorte, esta tabla relaciona las materias y los cursos incluidos para esa cohorte. Además relaciona el id en un sistema externo virtual';


-- -----------------------------------------------------
-- Table `cohortes`.`Cursoprogramado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Cursoprogramado` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Cursoprogramado` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `materiaId` INT NOT NULL,
  `grupo` INT NOT NULL,
  `cohorteId` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_cursoprogramado_Materia1`
    FOREIGN KEY (`materiaId`)
    REFERENCES `cohortes`.`Materia` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cursoprogramado_Cohorte1`
    FOREIGN KEY (`cohorteId`)
    REFERENCES `cohortes`.`Cohorte` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `index_programacion` ON `cohortes`.`Cursoprogramado` (`cohorteId` ASC, `materiaId` ASC, `grupo` ASC) COMMENT 'No se puede programar un grupo para una misma materia en una misma cohorte' VISIBLE;


-- -----------------------------------------------------
-- Table `cohortes`.`Metacurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Metacurso` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Metacurso` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `cursoscohorteId` INT NOT NULL,
  `cursoprogramadoId` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_metacurso_cursoscohorte1`
    FOREIGN KEY (`cursoscohorteId`)
    REFERENCES `cohortes`.`Cursocohorte` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Metacurso_cursoprogramado1`
    FOREIGN KEY (`cursoprogramadoId`)
    REFERENCES `cohortes`.`Cursoprogramado` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cohortes`.`Recurrencia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Recurrencia` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Recurrencia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cohortes`.`Reunionvideoconferencia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Reunionvideoconferencia` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Reunionvideoconferencia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `uuid` VARCHAR(45) NOT NULL,
  `idsistemaexterno` VARCHAR(45) NOT NULL,
  `urljoin` VARCHAR(100) NOT NULL,
  `urlstart` VARCHAR(100) NOT NULL,
  `hostid` VARCHAR(45) NOT NULL,
  `createdat` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cohortes`.`Horariocurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Horariocurso` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Horariocurso` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `cursocohorteId` INT NOT NULL,
  `cohorteId` INT NOT NULL,
  `fechainicial` DATE NOT NULL COMMENT 'Incluye el día y la hora de inicio',
  `fechafinal` DATE NOT NULL COMMENT 'Solo se tiene en cuenta para el final de la recurrencia',
  `lunes` TINYINT NULL,
  `martes` TINYINT NULL,
  `miercoles` TINYINT NULL,
  `jueves` TINYINT NULL,
  `viernes` TINYINT NULL,
  `sabado` TINYINT NULL,
  `domingo` TINYINT NULL,
  `duracion` INT NOT NULL COMMENT 'En minutos',
  `profesor1Id` INT NOT NULL COMMENT 'Con este profesor es que se programa la clase en zoom',
  `necesitavideoconferencia` TINYINT NOT NULL,
  `recurrenciaId` INT NOT NULL COMMENT 'Recurrencia 0 y periodo 0 significa que la fecha inicial y fecha fina debe ser la misma or que es un evento unico. \nEjemplo: encuentros sincronicos de pifle',
  `periodo` INT NOT NULL,
  `reunionvideoconferenciaId` INT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_horarioscurso_cursoscohorte1`
    FOREIGN KEY (`cursocohorteId`)
    REFERENCES `cohortes`.`Cursocohorte` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_horarioscurso_cohorte1`
    FOREIGN KEY (`cohorteId`)
    REFERENCES `cohortes`.`Cohorte` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_horarioscurso_contactos1`
    FOREIGN KEY (`profesor1Id`)
    REFERENCES `cohortes`.`Contacto` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_horariocurso_recurrencia1`
    FOREIGN KEY (`recurrenciaId`)
    REFERENCES `cohortes`.`Recurrencia` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_horariocurso_reunionvideoconferencia1`
    FOREIGN KEY (`reunionvideoconferenciaId`)
    REFERENCES `cohortes`.`Reunionvideoconferencia` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `cohortes`.`Ocurrencia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `cohortes`.`Ocurrencia` ;

CREATE TABLE IF NOT EXISTS `cohortes`.`Ocurrencia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idexterno` VARCHAR(45) NOT NULL,
  `starttime` VARCHAR(45) NOT NULL,
  `duracion` INT NOT NULL,
  `status` VARCHAR(45) NOT NULL,
  `reunionvideoconferenciaId` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_ocurrencia_reunionvideoconferencia1`
    FOREIGN KEY (`reunionvideoconferenciaId`)
    REFERENCES `cohortes`.`Reunionvideoconferencia` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
