-- MySQL Script generated by MySQL Workbench
-- Thu Jan 17 19:26:46 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema cohortes
-- -----------------------------------------------------
-- Base de datos de la apliación cohortes

-- -----------------------------------------------------
-- Table `Materia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Materia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idexterno` VARCHAR(45) NOT NULL COMMENT 'Id del sistema externo, es el codigo de la materia en el sistema externo',
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idexterno` ON `Materia` (`idexterno` ASC);


-- -----------------------------------------------------
-- Table `Contacto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Contacto` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `email1` VARCHAR(45) NOT NULL,
  `email2` VARCHAR(45) NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `telefono` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `email` ON `Contacto` (`email1` ASC);


-- -----------------------------------------------------
-- Table `Cohorte`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Cohorte` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL COMMENT 'Un nombre para la cohorte, ejemplos\nPregrados Virtuales Ingeniera\nArchivistica\n',
  `codigo` VARCHAR(10) NOT NULL COMMENT 'Un identificador corto, sin espacios para identificar la cohorte.\nEjemplo\n20191',
  `descripcion` VARCHAR(45) NOT NULL COMMENT 'Una breve explicación de la cohorte',
  `fechainicio` DATE NOT NULL,
  `fechafinal` DATE NOT NULL,
  `coordinadoracademicoId` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Cursocohorte`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Cursocohorte` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `cohorteId` INT NOT NULL,
  `isprogramadoenreuniones` TINYINT NOT NULL,
  `idlms` VARCHAR(15) NULL,
  `urllms` VARCHAR(100) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'cursos que pertenecen a la cohorte, esta tabla relaciona las materias y los cursos incluidos para esa cohorte. Además relaciona el id en un sistema externo virtual';


-- -----------------------------------------------------
-- Table `Metacurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Metacurso` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `grupo` INT NOT NULL,
  `materiaId` INT NOT NULL,
  `cursoscohorteId` INT NOT NULL,
  `cohorteId` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `metacurso` ON `Metacurso` (`cursoscohorteId` ASC, `materiaId` ASC, `grupo` ASC) COMMENT 'Indice para garantizar que no ingrese en un metacurso una doble entrada de \nCohorte\nMateria\nGrupo';

CREATE UNIQUE INDEX `cursoprogramado` ON `Metacurso` (`cohorteId` ASC, `materiaId` ASC, `grupo` ASC);


-- -----------------------------------------------------
-- Table `Recurrencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Recurrencia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Reunionvideoconferencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Reunionvideoconferencia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `uuid` VARCHAR(45) NOT NULL,
  `idsistemaexterno` VARCHAR(45) NOT NULL,
  `urljoin` VARCHAR(100) NOT NULL,
  `urlstart` VARCHAR(100) NOT NULL,
  `hostid` VARCHAR(45) NOT NULL,
  `createdat` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Horariocurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Horariocurso` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `cursocohorteId` INT NOT NULL,
  `cohorteId` INT NOT NULL,
  `fechainicial` DATE NOT NULL COMMENT 'Incluye el día y la hora de inicio',
  `fechafinal` DATE NOT NULL COMMENT 'Solo se tiene en cuenta para el final de la recurrencia',
  `lunes` TINYINT NULL,
  `martes` TINYINT NULL,
  `miercoles` TINYINT NULL,
  `jueves` TINYINT NULL,
  `viernes` TINYINT NULL,
  `sabado` TINYINT NULL,
  `domingo` TINYINT NULL,
  `duracion` INT NOT NULL COMMENT 'En minutos',
  `profesor1Id` INT NOT NULL COMMENT 'Con este profesor es que se programa la clase en zoom',
  `necesitavideoconferencia` TINYINT NOT NULL,
  `recurrenciaId` INT NOT NULL COMMENT 'Recurrencia 0 y periodo 0 significa que la fecha inicial y fecha fina debe ser la misma or que es un evento unico. \nEjemplo: encuentros sincronicos de pifle',
  `periodo` INT NOT NULL,
  `reunionvideoconferenciaId` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Ocurrencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Ocurrencia` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idexterno` VARCHAR(45) NOT NULL,
  `starttime` VARCHAR(45) NOT NULL,
  `duracion` INT NOT NULL,
  `status` VARCHAR(45) NOT NULL,
  `reunionvideoconferenciaId` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
